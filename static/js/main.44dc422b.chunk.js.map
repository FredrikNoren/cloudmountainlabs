{"version":3,"sources":["MountRoukeLogo.svg","DerkLogo.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","className","src","LogoSvg","alt","href","DerkLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,+LC4D5BC,MAvDf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKC,IAASF,UAAU,OAAOG,IAAI,yBAE1C,yBAAKH,UAAU,WACb,yBAAKA,UAAU,UAAf,SAGA,uBAAGI,KAAK,wBACN,yBAAKJ,UAAU,WAAWC,IAAKI,IAAUF,IAAI,sCAGjD,yBAAKH,UAAU,WACb,yBAAKA,UAAU,UAAf,kBAGA,yBAAKA,UAAU,gBACb,mEAEA,wFAEA,mIAEA,4XAEA,+cAEA,ucAEA,4LAEA,2BACE,uBAAGI,KAAK,gCAAR,0BAAiE,6BACjE,uBAAGA,KAAK,6EAAR,+BAGF,kCACA,2BACE,4CAAoB,6BADtB,yBAEqB,6BAFrB,8BAG6B,6BAH7B,iBAIgB,uBAAGA,KAAK,uBAAR,uBAAqD,6BAJrE,mBAKkB,uBAAGA,KAAK,yBAAR,yBAAyD,6BAL3E,cAMa,uBAAGA,KAAK,wDAAR,wDAAuH,6BANpI,4BAO2B,uBAAGA,KAAK,0DAAR,+DCvCjBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.44dc422b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/MountRoukeLogo.79787eff.svg\";","module.exports = __webpack_public_path__ + \"static/media/DerkLogo.14bc61bd.png\";","import React from 'react';\nimport './App.css';\nimport LogoSvg from './MountRoukeLogo.svg';\nimport DerkLogo from './DerkLogo.png';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"LogoContainer\">\n        <img src={LogoSvg} className=\"Logo\" alt=\"Mount Rouke Studios\" />\n      </div>\n      <div className=\"Section\">\n        <div className=\"Header\">\n          Games\n        </div>\n        <a href=\"https://derkgame.com\">\n          <img className=\"GameLogo\" src={DerkLogo} alt=\"Dr. Derk's Mutant Battlegrounds\" />\n        </a>\n      </div>\n      <div className=\"Section\">\n        <div className=\"Header\">\n          Press releases\n        </div>\n        <div className=\"PressRelease\">\n          <p>FOR IMMEDIATE RELEASE: JULY 28, 2020</p>\n\n          <h1>AI BASED GAME “DERK” LAUNCHING IN EARLY ACCESS</h1>\n\n          <h2>A MOBA where you train neural networks to fight for you in a bizarre western-themed world? Why not!</h2>\n\n          <p>Berlin - July 28, 2020 -- It’s been a little over two years since the scientists at OpenAI managed to beat top DOTA players using neural networks trained by playing against themselves. Upstart Mount Rouke Studios is now betting that they can make a simplified version of that technology into a PC game, which is launching in early access today.</p>\n\n          <p>The game, called “Dr. Derk’s Mutant Battlegrounds”, looks like a quirky western themed version of a MOBA with two sides facing each other and precious statues they need to defend. But instead of player controlled heroes, the two sides have Derklings, a boxy dinosaur looking creature that the players have trained beforehand. The goal is to figure out how to best equip and train your Derklings to beat the opponents.</p>\n\n          <p>It’s a fun and quirky game where the Derklings can be equipped by the player with anything from huge guns to bubblegum, and they can be trained against a number of enemies such as a scarecrow, a duck and a crab. However due to the fact that what you’re actually training is their neural networks, there’s a huge amount of depth to the game as there are almost limitless behaviours they could be trained to do.</p>\n\n          <p>The world of artificial intelligence is moving incredibly fast, and for a layman this game may be the easiest way out there to experiment with it first hand.</p>\n\n          <p>\n            <a href=\"https://youtu.be/-Lqb8cce5tk\">See the launch trailer</a><br />\n            <a href=\"https://store.steampowered.com/app/1102370/Dr_Derks_Mutant_Battlegrounds/\">Get the game on Steam ($5)</a>\n          </p>\n\n          <p>###</p>\n          <p>\n            <b>Press contact</b><br/>\n            Name: Fredrik Norén<br/>\n            Email: noren@mountrouke.com<br/>\n            Game website: <a href=\"http://derkgame.com\">http://derkgame.com</a><br/>\n            Studio website: <a href=\"http://mountrouke.com\">http://mountrouke.com</a><br/>\n            Press kit: <a href=\"http://files.mountrouke.com/DerkPressKitJuly2020.zip\">http://files.mountrouke.com/DerkPressKitJuly2020.zip</a><br/>\n            Launch trailer download: <a href=\"http://files.mountrouke.com/DerkEarlyAccessTrailer.mp4\">http://files.mountrouke.com/DerkEarlyAccessTrailer.mp4</a>\n          </p>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}